Learn ASM - Volume 4
Chapters
	Bitwise Operations ......................................................... 11
	Advanced Functions ......................................................... 34
	Interrupts and System Calls ................................................ 56
	Floating Point Arithmetic .................................................. 79
	Memory Segments and Pointers ............................................... 92
	Structures / Records ....................................................... 107
	Show What You Know ......................................................... 124

[11] Chapter 1: Bitwise Operations
	Bitwise operations let you manipulate individual bits in a register on memory.

	Example:

		mov al, 0b10101010
		and al, 0b11110000  ; AL = 10100000
		or al, 0b00001111   ; AL = 10101111
		xor al, 0b11111111  ; AL = 01010000
		not al              ; AL = 10101111

	Shifts:

		shl al, 1           ; Shift left (multiply by 2)
		shr al, 1           ; Shift right (divide by 2)

	Notes:
		- AND -> clears bits that are 0 in the mask
		- OR -> sets bits that are 1 in the mask
		- XOR -> toggles bits
		- NOT -> inverts all bits
		- Shifts multiply or divide by powers of 2

[34] Chapter 2: Advanced Functions
	Functions can have multiple arguments, local variables, and even recursion.

	Example: Function with two arguments passed via stack

		; Caller
		push 5
		push 10
		call add_numbers
		add esp, 8          ; Clean up stack

		; Function
		add_numbers:
			mov eax, [esp+4]        ; First argument
			add eax, [esp+8]        ; Second argument
			ret

	Notes:
		- Arguments are often pushed in reverse order
		- Use ret to return to the caller
		- Recursion is possible by calling the function within itself

[56] Chapter 3: Interrupts and System Calls
	ASM can interact with the OS using interrupts (32-bit) or syscalls (64-bit).

	Example: Read a character from keyboard (Linux 32-bit)

		mov eax, 3		; sys_read
		mov ebx, 0		; stdin
		mov ecx, buffer	; memory to store input
		mov edx, 1		; number of bytes
		int 0x80

	Example: Write string to stdout
		
		mov eax, 4		; sys_write
		mov ebx, 1		; stdout
		mov ecx, msg
		mov edx, 12
		int 0x80

	Notes:
		- int 0x80 triggers a Linux interrupt
		- Syscalls differ between 32-bit and 64-bit systems

[79] Chapter 4: Floating Point Arithmetic
	The FPU (x87) allows you to work with floating point numbers.

	Example:

		fld dword [num1]	; Load float into FPU
		fadd dword [num2]	; Add
		fstp dword [result] ; Store result

	Notes:
		- FPU instructions start with f (fld, fadd, fsub, fmul, fdiv)
		- You can store/load floats and doubles from memory

[92] Chapter 5: Memory Segments and Pointers
	Registers DS, SS, ES, FS, GS allow you to manage different memory segments.

	Example:

		mov ax, data_segment
		mov ds, ax				; Set data segment
		mov al, [bx]			; Access memory at DS:BX

	Notes:
		- DS -> data segment
		- SS -> stack segment
		- Pointers are just memory addresses
		- You can perform arithmetic on pointers to navigate arrays

[107] Chapter 6: Structures / Records
	ASM can simulate structures by using offsets in memory.

	Example:
		
		section .data
		person_name db "Alice", 0
		person_age db 25
		person db person_name, person_age

		; Access age:
		mov al, [person + 5]	; 6th byte = age

	Notes:
		- Structure fields are accessed by offset
		- Useful for grouping related data

[124] Chapter 7: Show What You Know
	Question 1: What does XOR do to a register?
		A) Clears it
		B) Toggles bits
		C) Sets it to 1
		Your answer: ________

	Question 2: How do you pass multiple arguments to a function via stack?
		A) Push them in reverse order
		B) Push them in forward order
		C) Store in registers only
		Your answer: ________

	Question 3: Which FPU instruction adds two floating point numbers?
		A) fmul
		B) fadd
		C) fsub
		Your answer: ________

	Question 4: Which segment register is used for stack operations?
		A) DS
		B) SS
		C) ES
		Your answer: ________

	Question 5: TEST: In volume 1, what level of programming did it say ASM was?
		A) Low-Level Programming
		B) High-Level Programming
		Your answer: ________
	
	Question 6: TEST: In volume 2, to return from a function, what is the proper syntax?
		A) ret
		B) return
		C) back
		Your answer: ________
	Question 7: TEST: In volume 3, what was the challenge?
		A) Create a Bubble Sort algorithm
		B) Create a calculator as an algorithm
		C) Create a stopwatch algorithm
		Your answer: ________